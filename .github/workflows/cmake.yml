name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ubuntu-build:
    strategy:
      fail-fast: false
      matrix:
        build-type: [Debug, Release]
        gcc-version: [10]
          
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
        
    - name: Update GCC
      id: update-gcc
      uses: egor-tensin/setup-gcc@v1
      with:
        version: ${{ matrix.gcc-version }}
        
    - name: Get Conan
      uses: turtlebrowser/get-conan@v1.1
    
    - name: Create default profile
      run: | 
        conan profile new default --detect
        conan profile update settings.build_type=${{ matrix.build-type }} default
        conan profile update settings.compiler.libcxx=libstdc++11 default
    
    - name: Install Dependencies
      run: conan install . -if ${{ github.workspace }}/build --build=missing

    - name: Configure CMake Debug
      if: ${{ matrix.build-type == 'Debug' }}
      run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=Debug -DCODE_COVERAGE=ON

    - name: Configure CMake Release
      if: ${{ matrix.build-type == 'Release' }}
      run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build-type }} -j 3

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: ctest -C ${{ matrix.build-type }} --output-on-failure

    - name: Codecov
      if: ${{ matrix.build-type == 'Debug' }}
      # You may pin to the exact commit or the version.
      # uses: codecov/codecov-action@d9f34f8cd5cb3b3eb79b3e4b5dae3a16df499a70
      uses: codecov/codecov-action@v3.1.1
      #with:
        # Directory to search for coverage reports.
        directory: ${{ github.workspace }}/build
        # Don't upload files to Codecov
        #dry_run: # optional
        # Specify whether or not CI build should fail if Codecov runs into an error during upload
        fail_ci_if_error: true
      
  macos-build:
    strategy:
      fail-fast: false
      matrix:
        build-type: [Debug, Release]
          
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    
    - name: Select Python 3.10
      # otherwise turtlebrowser/get-conan@v1.1 fails on macos-12
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Get Conan
      uses: turtlebrowser/get-conan@v1.1
    
    - name: Create default profile
      # M1 is not supported by all dependencies
      run: | 
        conan profile new default --detect
        conan profile update settings.build_type=${{ matrix.build-type }} default
        conan profile update settings.arch=x86_64 default
        conan profile update settings.arch_build=x86_64 default
    
    - name: Install Dependencies
      run: conan install . -if ${{ github.workspace }}/build --build=missing
        
    - name: Configure CMake
      run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build-type }} -j 3

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: ctest -C ${{ matrix.build-type }} --output-on-failure
      
  windows-build:
    strategy:
      fail-fast: false
      matrix:
        build-type: [Debug, Release]
        msvc-version: [16]
          
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
        
    - name: Get Conan
      uses: turtlebrowser/get-conan@v1.1
    
    - name: Create default profile
      run: | 
        conan profile new default --detect
        conan profile update settings.build_type=${{ matrix.build-type }} default
        conan profile update settings.compiler.version=${{ matrix.msvc-version }} default
    
    - name: Install Dependencies
      run: conan install . -if ${{ github.workspace }}/build --build=missing

    - name: Configure CMake
      run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DCONAN_DISABLE_CHECK_COMPILER=ON

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build-type }} -j 3

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: ctest -C ${{ matrix.build-type }} --output-on-failure
